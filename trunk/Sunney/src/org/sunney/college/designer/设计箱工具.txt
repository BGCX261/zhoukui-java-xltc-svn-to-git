策略模式：定义算法族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
策略模式基础：抽象,封装,多态,继承
策略模式原则：封装变化;多用组合，少用继承;针对接口编程，不针对实现编程;


观察者模式：在对象之间定义一对多依赖，这样一来，当一个对象改变状态，依赖它的对象都会收到通知并自动更新。(代表--MVC)
观察者模式基础：抽象
观察者模式原则：封装变化;多用组合，少用继承;针对接口编程，不针对实现编程;为交互对象之间的松耦合设计而努力;

装饰者模式：动态的将责任附加到对象上。想要扩展功能，装饰者提供有别于继承的另外一种选择。
装饰者模式基础：抽象,封装,多态,继承
装饰者模式原则：封装变化;多用组合，少用继承;针对接口编程，不针对实现编程;为交互对象之间的松耦合设计而努力;对扩展开发,对修改关闭;

工厂方法模式：
工厂方法模式基础：
工厂方法模式原则：

避免违反依赖倒置原则的指导方针：
1，变量不可以持有具体类的引用
2，不要让类派生自具体类
3，不要覆盖基类中已经实现的方法

单例模式：确保一个类只有一个示例，并提供全局访问点。
单例模式基础：
单例模式原则：

命令模式：将请求封装成对象，这可以让你使用不同的请求、队列、或者日志请求来参数化其他对象。命令模式也支持撤销操作。
命令模式基础：抽象,封装,多态,继承
命令模式原则：封装变化;多用组合，少用继承;针对接口编程，不针对实现编程;为交互对象之间的松耦合设计而努力;对扩展开发,对修改关闭;依赖抽象，不要依赖具体类。

适配器模式：将一个类的接口，转换为客户期望另一个接口。适配器让原本不兼容的类可以合作无间。
模式基础：
模式原则：

外观模式：提供了一个同意的接口，用来访问系统中的一群接口。外观定义了一个高层接口，让子系统更容易使用。
模式基础：
模式原则：

模版方法模式：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。
模式基础：
模式原则：

迭代器模式：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
模式基础：
模式原则：

状态模式：允许对象在内部状态改变时改变它的行为，对象看起来好像修改了他的类。
模式基础：
模式原则：